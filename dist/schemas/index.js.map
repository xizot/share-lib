{"version":3,"sources":["../../src/schemas/index.ts"],"names":["z"],"mappings":"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","file":"index.js","sourcesContent":["import { z } from 'zod'\r\n\r\n// User schemas\r\nexport const userSchema = z.object({\r\n  id: z.string().uuid(),\r\n  email: z.string().email(),\r\n  name: z.string().min(2).max(50),\r\n  avatar: z.string().url().optional(),\r\n  role: z.enum(['admin', 'user', 'moderator']),\r\n  createdAt: z.string().datetime(),\r\n  updatedAt: z.string().datetime(),\r\n})\r\n\r\nexport const createUserSchema = userSchema.omit({\r\n  id: true,\r\n  createdAt: true,\r\n  updatedAt: true,\r\n})\r\n\r\nexport const updateUserSchema = createUserSchema.partial()\r\n\r\n// Auth schemas\r\nexport const loginSchema = z.object({\r\n  email: z.string().email('Invalid email address'),\r\n  password: z.string().min(6, 'Password must be at least 6 characters'),\r\n})\r\n\r\nexport const registerSchema = loginSchema.extend({\r\n  name: z.string().min(2, 'Name must be at least 2 characters'),\r\n  confirmPassword: z.string(),\r\n}).refine((data) => data.password === data.confirmPassword, {\r\n  message: \"Passwords don't match\",\r\n  path: [\"confirmPassword\"],\r\n})\r\n\r\n// API Response schemas\r\nexport const apiResponseSchema = <T extends z.ZodTypeAny>(dataSchema: T) =>\r\n  z.object({\r\n    data: dataSchema,\r\n    message: z.string(),\r\n    success: z.boolean(),\r\n    error: z.string().optional(),\r\n  })\r\n\r\nexport const paginatedResponseSchema = <T extends z.ZodTypeAny>(itemSchema: T) =>\r\n  z.object({\r\n    data: z.array(itemSchema),\r\n    message: z.string(),\r\n    success: z.boolean(),\r\n    error: z.string().optional(),\r\n    pagination: z.object({\r\n      page: z.number().int().positive(),\r\n      limit: z.number().int().positive(),\r\n      total: z.number().int().nonnegative(),\r\n      totalPages: z.number().int().nonnegative(),\r\n    }),\r\n  })\r\n\r\n// Form schemas\r\nexport const contactFormSchema = z.object({\r\n  name: z.string().min(2, 'Name is required'),\r\n  email: z.string().email('Invalid email address'),\r\n  subject: z.string().min(5, 'Subject must be at least 5 characters'),\r\n  message: z.string().min(10, 'Message must be at least 10 characters'),\r\n})\r\n\r\n// Settings schemas\r\nexport const themeConfigSchema = z.object({\r\n  theme: z.enum(['light', 'dark', 'system']),\r\n  primaryColor: z.string().regex(/^#[0-9A-F]{6}$/i, 'Invalid color format'),\r\n  secondaryColor: z.string().regex(/^#[0-9A-F]{6}$/i, 'Invalid color format'),\r\n})\r\n\r\n// Export types derived from schemas\r\nexport type UserSchema = z.infer<typeof userSchema>\r\nexport type CreateUserSchema = z.infer<typeof createUserSchema>\r\nexport type UpdateUserSchema = z.infer<typeof updateUserSchema>\r\nexport type LoginSchema = z.infer<typeof loginSchema>\r\nexport type RegisterSchema = z.infer<typeof registerSchema>\r\nexport type ContactFormSchema = z.infer<typeof contactFormSchema>\r\nexport type ThemeConfigSchema = z.infer<typeof themeConfigSchema> "]}