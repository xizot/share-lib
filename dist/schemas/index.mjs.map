{"version":3,"sources":["../../src/schemas/user.schema.ts","../../src/schemas/product.schema.ts","../../src/schemas/api.schema.ts"],"names":["z"],"mappings":"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","file":"index.mjs","sourcesContent":["import { z } from 'zod';\r\n\r\nexport const UserSchema = z.object({\r\n  id: z.string().uuid(),\r\n  email: z.string().email('Invalid email address'),\r\n  username: z.string().min(3, 'Username must be at least 3 characters').max(20, 'Username must be at most 20 characters'),\r\n  fullName: z.string().min(1, 'Full name is required').max(100, 'Full name must be at most 100 characters'),\r\n  avatar: z.string().url().optional(),\r\n  role: z.enum(['admin', 'user', 'moderator']).default('user'),\r\n  isActive: z.boolean().default(true),\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n});\r\n\r\nexport const CreateUserSchema = UserSchema.omit({\r\n  id: true,\r\n  createdAt: true,\r\n  updatedAt: true,\r\n});\r\n\r\nexport const UpdateUserSchema = UserSchema.partial().omit({\r\n  id: true,\r\n  createdAt: true,\r\n});\r\n\r\nexport type User = z.infer<typeof UserSchema>;\r\nexport type CreateUser = z.infer<typeof CreateUserSchema>;\r\nexport type UpdateUser = z.infer<typeof UpdateUserSchema>; ","import { z } from 'zod';\r\n\r\nexport const ProductSchema = z.object({\r\n  id: z.string().uuid(),\r\n  name: z.string().min(1, 'Product name is required').max(200, 'Product name must be at most 200 characters'),\r\n  description: z.string().min(10, 'Description must be at least 10 characters').max(1000, 'Description must be at most 1000 characters'),\r\n  price: z.number().positive('Price must be positive'),\r\n  currency: z.enum(['USD', 'EUR', 'VND']).default('USD'),\r\n  category: z.string().min(1, 'Category is required'),\r\n  tags: z.array(z.string()).default([]),\r\n  images: z.array(z.string().url()).default([]),\r\n  inStock: z.boolean().default(true),\r\n  stockQuantity: z.number().int().min(0, 'Stock quantity must be non-negative').default(0),\r\n  weight: z.number().positive().optional(),\r\n  dimensions: z.object({\r\n    length: z.number().positive(),\r\n    width: z.number().positive(),\r\n    height: z.number().positive(),\r\n  }).optional(),\r\n  isActive: z.boolean().default(true),\r\n  createdAt: z.date(),\r\n  updatedAt: z.date(),\r\n});\r\n\r\nexport const CreateProductSchema = ProductSchema.omit({\r\n  id: true,\r\n  createdAt: true,\r\n  updatedAt: true,\r\n});\r\n\r\nexport const UpdateProductSchema = ProductSchema.partial().omit({\r\n  id: true,\r\n  createdAt: true,\r\n});\r\n\r\nexport const ProductFilterSchema = z.object({\r\n  category: z.string().optional(),\r\n  minPrice: z.number().positive().optional(),\r\n  maxPrice: z.number().positive().optional(),\r\n  inStock: z.boolean().optional(),\r\n  tags: z.array(z.string()).optional(),\r\n});\r\n\r\nexport type Product = z.infer<typeof ProductSchema>;\r\nexport type CreateProduct = z.infer<typeof CreateProductSchema>;\r\nexport type UpdateProduct = z.infer<typeof UpdateProductSchema>;\r\nexport type ProductFilter = z.infer<typeof ProductFilterSchema>; ","import { z } from 'zod';\r\n\r\nexport const ApiResponseSchema = z.object({\r\n  success: z.boolean(),\r\n  message: z.string(),\r\n  data: z.unknown().optional(),\r\n  error: z.object({\r\n    code: z.string(),\r\n    message: z.string(),\r\n    details: z.unknown().optional(),\r\n  }).optional(),\r\n  timestamp: z.date(),\r\n});\r\n\r\nexport const PaginationSchema = z.object({\r\n  page: z.number().int().min(1, 'Page must be at least 1').default(1),\r\n  limit: z.number().int().min(1, 'Limit must be at least 1').max(100, 'Limit must be at most 100').default(10),\r\n  total: z.number().int().min(0, 'Total must be non-negative'),\r\n  totalPages: z.number().int().min(0, 'Total pages must be non-negative'),\r\n});\r\n\r\nexport const PaginatedResponseSchema = ApiResponseSchema.extend({\r\n  data: z.object({\r\n    items: z.array(z.unknown()),\r\n    pagination: PaginationSchema,\r\n  }),\r\n});\r\n\r\nexport const ErrorResponseSchema = z.object({\r\n  success: z.literal(false),\r\n  message: z.string(),\r\n  error: z.object({\r\n    code: z.string(),\r\n    message: z.string(),\r\n    details: z.unknown().optional(),\r\n  }),\r\n  timestamp: z.date(),\r\n});\r\n\r\nexport const SuccessResponseSchema = z.object({\r\n  success: z.literal(true),\r\n  message: z.string(),\r\n  data: z.unknown().optional(),\r\n  timestamp: z.date(),\r\n});\r\n\r\nexport type ApiResponse<T = unknown> = {\r\n  success: boolean;\r\n  message: string;\r\n  data?: T;\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n    details?: unknown;\r\n  };\r\n  timestamp: Date;\r\n};\r\n\r\nexport type PaginatedResponse<T = unknown> = {\r\n  success: boolean;\r\n  message: string;\r\n  data: {\r\n    items: T[];\r\n    pagination: Pagination;\r\n  };\r\n  timestamp: Date;\r\n};\r\n\r\nexport type Pagination = z.infer<typeof PaginationSchema>;\r\nexport type ErrorResponse = z.infer<typeof ErrorResponseSchema>;\r\nexport type SuccessResponse<T = unknown> = Omit<z.infer<typeof SuccessResponseSchema>, 'data'> & { data?: T }; "]}