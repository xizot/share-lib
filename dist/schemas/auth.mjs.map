{"version":3,"sources":["../../src/schemas/auth.ts"],"sourcesContent":["import { z } from \"zod\"\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n})\n\nexport const registerSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n})\n\nexport const forgotPasswordSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n})\n\nexport const resetPasswordSchema = z.object({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string(),\n  token: z.string().min(1, \"Token is required\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n})\n\nexport const userProfileSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  bio: z.string().max(500, \"Bio must be less than 500 characters\").optional(),\n  website: z.string().url(\"Invalid URL\").optional().or(z.literal(\"\")),\n})\n\nexport type LoginFormData = z.infer<typeof loginSchema>\nexport type RegisterFormData = z.infer<typeof registerSchema>\nexport type ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema>\nexport type ResetPasswordFormData = z.infer<typeof resetPasswordSchema>\nexport type UserProfileFormData = z.infer<typeof userProfileSchema> "],"mappings":";;;AAAA,SAAS,SAAS;AAEX,IAAM,cAAc,EAAE,OAAO;AAAA,EAClC,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EAC/C,UAAU,EAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC;AACtE,CAAC;AAEM,IAAM,iBAAiB,EAAE,OAAO;AAAA,EACrC,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EAC/C,UAAU,EAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC;AAAA,EACpE,iBAAiB,EAAE,OAAO;AAAA,EAC1B,WAAW,EAAE,OAAO,EAAE,IAAI,GAAG,wBAAwB;AAAA,EACrD,UAAU,EAAE,OAAO,EAAE,IAAI,GAAG,uBAAuB;AACrD,CAAC,EAAE,OAAO,CAAC,SAAS,KAAK,aAAa,KAAK,iBAAiB;AAAA,EAC1D,SAAS;AAAA,EACT,MAAM,CAAC,iBAAiB;AAC1B,CAAC;AAEM,IAAM,uBAAuB,EAAE,OAAO;AAAA,EAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB;AACjD,CAAC;AAEM,IAAM,sBAAsB,EAAE,OAAO;AAAA,EAC1C,UAAU,EAAE,OAAO,EAAE,IAAI,GAAG,wCAAwC;AAAA,EACpE,iBAAiB,EAAE,OAAO;AAAA,EAC1B,OAAO,EAAE,OAAO,EAAE,IAAI,GAAG,mBAAmB;AAC9C,CAAC,EAAE,OAAO,CAAC,SAAS,KAAK,aAAa,KAAK,iBAAiB;AAAA,EAC1D,SAAS;AAAA,EACT,MAAM,CAAC,iBAAiB;AAC1B,CAAC;AAEM,IAAM,oBAAoB,EAAE,OAAO;AAAA,EACxC,WAAW,EAAE,OAAO,EAAE,IAAI,GAAG,wBAAwB;AAAA,EACrD,UAAU,EAAE,OAAO,EAAE,IAAI,GAAG,uBAAuB;AAAA,EACnD,OAAO,EAAE,OAAO,EAAE,MAAM,uBAAuB;AAAA,EAC/C,OAAO,EAAE,OAAO,EAAE,SAAS;AAAA,EAC3B,KAAK,EAAE,OAAO,EAAE,IAAI,KAAK,sCAAsC,EAAE,SAAS;AAAA,EAC1E,SAAS,EAAE,OAAO,EAAE,IAAI,aAAa,EAAE,SAAS,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC;AACpE,CAAC;","names":[]}