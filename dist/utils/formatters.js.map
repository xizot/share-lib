{"version":3,"sources":["../../src/utils/formatters.ts"],"sourcesContent":["export function formatCurrency(\n  amount: number,\n  currency: string = \"USD\",\n  locale: string = \"en-US\"\n): string {\n  return new Intl.NumberFormat(locale, {\n    style: \"currency\",\n    currency,\n  }).format(amount)\n}\n\nexport function formatDate(\n  date: Date | string,\n  options: Intl.DateTimeFormatOptions = {},\n  locale: string = \"en-US\"\n): string {\n  const dateObj = typeof date === \"string\" ? new Date(date) : date\n  return new Intl.DateTimeFormat(locale, {\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n    ...options,\n  }).format(dateObj)\n}\n\nexport function formatRelativeTime(date: Date | string): string {\n  const now = new Date()\n  const dateObj = typeof date === \"string\" ? new Date(date) : date\n  const diffInSeconds = Math.floor((now.getTime() - dateObj.getTime()) / 1000)\n\n  if (diffInSeconds < 60) return \"just now\"\n  if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} minutes ago`\n  if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} hours ago`\n  if (diffInSeconds < 2592000) return `${Math.floor(diffInSeconds / 86400)} days ago`\n  \n  return formatDate(dateObj)\n}\n\nexport function formatFileSize(bytes: number): string {\n  if (bytes === 0) return \"0 Bytes\"\n  \n  const k = 1024\n  const sizes = [\"Bytes\", \"KB\", \"MB\", \"GB\", \"TB\"]\n  const i = Math.floor(Math.log(bytes) / Math.log(k))\n  \n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \" \" + sizes[i]\n}\n\nexport function formatPhoneNumber(phoneNumber: string): string {\n  const cleaned = phoneNumber.replace(/\\D/g, \"\")\n  const match = cleaned.match(/^(\\d{3})(\\d{3})(\\d{4})$/)\n  \n  if (match) {\n    return `(${match[1]}) ${match[2]}-${match[3]}`\n  }\n  \n  return phoneNumber\n}\n\nexport function truncateText(text: string, maxLength: number): string {\n  if (text.length <= maxLength) return text\n  return text.slice(0, maxLength) + \"...\"\n}\n\nexport function capitalizeFirst(str: string): string {\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase()\n}\n\nexport function formatInitials(firstName: string, lastName: string): string {\n  return `${firstName.charAt(0)}${lastName.charAt(0)}`.toUpperCase()\n} "],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO,SAAS,eACd,QACA,WAAmB,OACnB,SAAiB,SACT;AACR,SAAO,IAAI,KAAK,aAAa,QAAQ;AAAA,IACnC,OAAO;AAAA,IACP;AAAA,EACF,CAAC,EAAE,OAAO,MAAM;AAClB;AAEO,SAAS,WACd,MACA,UAAsC,CAAC,GACvC,SAAiB,SACT;AACR,QAAM,UAAU,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AAC5D,SAAO,IAAI,KAAK,eAAe,QAAQ;AAAA,IACrC,MAAM;AAAA,IACN,OAAO;AAAA,IACP,KAAK;AAAA,IACL,GAAG;AAAA,EACL,CAAC,EAAE,OAAO,OAAO;AACnB;AAEO,SAAS,mBAAmB,MAA6B;AAC9D,QAAM,MAAM,oBAAI,KAAK;AACrB,QAAM,UAAU,OAAO,SAAS,WAAW,IAAI,KAAK,IAAI,IAAI;AAC5D,QAAM,gBAAgB,KAAK,OAAO,IAAI,QAAQ,IAAI,QAAQ,QAAQ,KAAK,GAAI;AAE3E,MAAI,gBAAgB,GAAI,QAAO;AAC/B,MAAI,gBAAgB,KAAM,QAAO,GAAG,KAAK,MAAM,gBAAgB,EAAE,CAAC;AAClE,MAAI,gBAAgB,MAAO,QAAO,GAAG,KAAK,MAAM,gBAAgB,IAAI,CAAC;AACrE,MAAI,gBAAgB,OAAS,QAAO,GAAG,KAAK,MAAM,gBAAgB,KAAK,CAAC;AAExE,SAAO,WAAW,OAAO;AAC3B;AAEO,SAAS,eAAe,OAAuB;AACpD,MAAI,UAAU,EAAG,QAAO;AAExB,QAAM,IAAI;AACV,QAAM,QAAQ,CAAC,SAAS,MAAM,MAAM,MAAM,IAAI;AAC9C,QAAM,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,CAAC,CAAC;AAElD,SAAO,YAAY,QAAQ,KAAK,IAAI,GAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,IAAI,MAAM,MAAM,CAAC;AACxE;AAEO,SAAS,kBAAkB,aAA6B;AAC7D,QAAM,UAAU,YAAY,QAAQ,OAAO,EAAE;AAC7C,QAAM,QAAQ,QAAQ,MAAM,yBAAyB;AAErD,MAAI,OAAO;AACT,WAAO,IAAI,MAAM,CAAC,CAAC,KAAK,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC;AAAA,EAC9C;AAEA,SAAO;AACT;AAEO,SAAS,aAAa,MAAc,WAA2B;AACpE,MAAI,KAAK,UAAU,UAAW,QAAO;AACrC,SAAO,KAAK,MAAM,GAAG,SAAS,IAAI;AACpC;AAEO,SAAS,gBAAgB,KAAqB;AACnD,SAAO,IAAI,OAAO,CAAC,EAAE,YAAY,IAAI,IAAI,MAAM,CAAC,EAAE,YAAY;AAChE;AAEO,SAAS,eAAe,WAAmB,UAA0B;AAC1E,SAAO,GAAG,UAAU,OAAO,CAAC,CAAC,GAAG,SAAS,OAAO,CAAC,CAAC,GAAG,YAAY;AACnE;","names":[]}